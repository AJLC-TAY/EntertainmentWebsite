Index: src/jscript.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const APIController = (function () {\r\n    window.onload = loadClientAPI;\r\n    // YOUTUBE REQUIREMENTS\r\n    const YT_API_KEY = 'AIzaSyDGdhwvUVmISQJlo8oforHn9LmFL-wJZ7M';\r\n    const YT_CLIENT_ID = '471584331255-p66pq86kuef1ocv3jcectp3t9kb1f9bl.apps.googleusercontent.com';\r\n    const BIGHIT_CHANNELID = 'UC3IZKseVpdzPSBaWxBxundA';\r\n\r\n    // SPOTIFY REQUIREMENTS\r\n    const SP_CLIENT_ID = '42aee398a9a943fd839ff19072e88470';\r\n    const SP_CLIENT_SEC = 'ce15cd96b46444929eec7b641dea0365';\r\n    const SP_TOKEN = btoa(SP_CLIENT_ID + \":\" + SP_CLIENT_SEC);\r\n\r\n    // No of elements\r\n    const MAX_RESULTS = '3';\r\n\r\n    /** Private methods for Youtube API */\r\n\r\n    //loads the Youtube API\r\n    function loadClientAPI() {\r\n        gapi.client.setApiKey(YT_API_KEY);\r\n        gapi.client.load(\"https://www.googleapis.com/discovery/v1/apis/youtube/v3/rest\")\r\n            .then(function() { console.log(\"GAPI client loaded for API\"); },\r\n                function(err) { console.error(\"Error loading GAPI client for API\", err); });\r\n        gapi.client.init({'clientId': YT_CLIENT_ID});\r\n    }\r\n\r\n    // gets the artists data\r\n    const _fetchArtistData = async () => {\r\n        const result = await fetch('http://bighitmusic.com/Artist.txt', {\r\n            headers: {\r\n                'Access-Control-Allow-Origin': '*',\r\n                \"Access-Control-Allow-Headers\": \"X-Requested-With\"\r\n            }\r\n        });\r\n        return await result.json();\r\n    }\r\n\r\n\r\n    // fetches the videos by the explicit keyword\r\n    const _fetchVideos = async (keyword) => {\r\n        var response = await gapi.client.youtube.search.list({\r\n            \"part\": \"snippet\",\r\n            \"channelId\": BIGHIT_CHANNELID,\r\n            \"maxResults\": MAX_RESULTS,\r\n            \"q\": keyword,\r\n            \"type\": \"video\"\r\n        });\r\n        return response.result.items;\r\n    }\r\n\r\n    /** Private methods for Spotify API */\r\n\r\n    // Fetches the token of the Spotify API\r\n    const _getToken = async () => {\r\n        const result = await fetch('https://accounts.spotify.com/api/token', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type' : 'application/x-www-form-urlencoded',\r\n                'Authorization' : 'Basic ' + SP_TOKEN\r\n            },\r\n            body: 'grant_type=client_credentials'\r\n        });\r\n\r\n        const data = await result.json();\r\n        return data.access_token;\r\n    }\r\n\r\n    // Fetches the Top Tracks of an artist by its ID, in a country\r\n    const _getTopTracks = async (artistId, market) => {\r\n\r\n        const result = await fetch (`https://api.spotify.com/v1/artists/${artistId}/top-tracks?market=${market}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type' : 'application/json',\r\n                'Authorization' : 'Bearer ' + await _getToken()\r\n            }\r\n        });\r\n        return await result.json();\r\n    }\r\n\r\n    // Fetches the tracks related to the searched keyword\r\n    const _fetchSongs = async (keyword) => {\r\n        let query = encodeURI(keyword);\r\n        const result = await fetch (`https://api.spotify.com/v1/search?q=${query}&type=track&market=PH`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type' : 'application/json',\r\n                'Authorization' : 'Bearer ' + await _getToken(),\r\n            }\r\n        });\r\n        return await result.json();\r\n\r\n\r\n    }\r\n\r\n    // use of closures to access the private methods\r\n    return {\r\n\r\n        // public method\r\n        fetchArtistData() {\r\n            return _fetchArtistData();\r\n        },\r\n\r\n        fetchVideos(keyword) {\r\n            return _fetchVideos(keyword);\r\n        },\r\n\r\n        getToken() {\r\n            return _getToken();\r\n        },\r\n        getTopTracks(artistId, market, token) {\r\n            return _getTopTracks(artistId, market, token);\r\n        },\r\n        fetchSongs(keyword) {\r\n            return _fetchSongs(keyword);\r\n\r\n        }\r\n    }\r\n\r\n})();\r\n\r\nconst UIController = (function() {\r\n    const DOMElements = {\r\n        head: 'head',\r\n        style: '#main-style',\r\n        videoList: '#video-list',\r\n        artistList: '#artist-list',\r\n        searchField: '#search-fld',\r\n        searchButton: '#search-btn',\r\n        filterButtons: '#filters',\r\n        playVideosButtons: '.video-btn',\r\n\r\n\r\n        // spotify\r\n        artistList02: '#list',\r\n        songList: '#song-list',\r\n        seeVideosButton: \".see-vid\",\r\n        songRadioBtn: \"#choice1\",\r\n        videoRadioBtn: \"#choice2\",\r\n        playAlbumButtons: \".album-btn\",\r\n\r\n        resultItemsCon: '#result-items-con',\r\n        videoCon: '.all-video-con',\r\n        songCon: '.all-song-con'\r\n    }\r\n\r\n    /** Private methods */\r\n    const _createVideoDetail = async (song) => {\r\n        let title = song.snippet.title;\r\n        let published = song.snippet.publishedAt;\r\n        let videoID = song.id.videoId;\r\n        let img = song.snippet.thumbnails.high;\r\n        let html =\r\n            `\r\n                <div class=\"video-con\">\r\n                    <button id=\"${videoID}\" class=\"video-btn\">\r\n                        <img src=\"${img.url}\" alt=\"Music video\" title=\"${title}\" style=\"width: 200px\" >\r\n                    </button>\r\n                    <div class=\"desc-con\">\r\n                        <h4>${title}</h4>\r\n                        <small>${published}</small><br>\r\n\r\n                    </div>\r\n                </div>\r\n                `;\r\n\r\n\r\n        try {\r\n            document.querySelector(DOMElements.videoList).insertAdjacentHTML('beforeend', html);\r\n        } catch (e){}\r\n    }\r\n\r\n    const _createArtistDetail = async (artist) => {\r\n        let img = artist.img;\r\n        let name = artist.name;\r\n        let nickName = artist.nickname;\r\n        const html =\r\n            `\r\n                    <div class=\"artistContainer\">\r\n                        <a href=\"https://kprofiles.com/big-hit-entertainment-profile-history-artists-facts/\">\r\n                        <img src=\"${img}\" alt=\"${nickName}\">\r\n                        </a>\r\n                        <br>\r\n                        <p><em><strong>${name}</strong></em></p>\r\n                        <p>\r\n                            Debut Year: ${artist.debutYear}<br>\r\n                            No of Artists: ${artist.memberNo}\r\n                        </p>\r\n                    </div>\r\n\r\n                `;\r\n\r\n        try {\r\n            document.querySelector(DOMElements.artistList).insertAdjacentHTML('beforeend', html);\r\n        } catch (e) {}\r\n    }\r\n\r\n    const _createFilterButtons = async (artist) => {\r\n        let name = artist.nickname;\r\n\r\n        const html = `\r\n            <button id=\"${name}\" class=\"filter-but\" type=\"button\">\r\n                <p style=\"margin: 2px 4px;\">${name}</p>\r\n            </button>\r\n        `;\r\n\r\n        try {\r\n            document.querySelector(DOMElements.filterButtons).insertAdjacentHTML('beforeend', html);\r\n        } catch (e) {}\r\n    }\r\n\r\n    const _displayNoSongResults = async () => {\r\n        let html = `<p>No results found.</p>`;\r\n        try {\r\n            document.querySelector(DOMElements.videoList).insertAdjacentHTML('beforeend', html);\r\n        } catch (e) {}\r\n    }\r\n\r\n    const _createSongDetail = async (track) => {\r\n        let artistName = track.album.artists[0].name;\r\n        // let trackId = track.id;\r\n        // let artistId = track.album.artists[0].id;\r\n        let albumuri = track.album.uri;\r\n        var trackName = track.name;\r\n        let albumName = track.album.name;\r\n        let releasedate = track.album.release_date;\r\n        let img = track.album.images[1];\r\n\r\n        let html = `\r\n            <div id=\"${artistName}\" class=\"spotify-song-con\">\r\n                <h3>${trackName}</h3>\r\n                <div class=\"track-info\" >\r\n                     <img src=\"${img.url}\" alt=\"Album image\"  >\r\n                     <div class=\"song-desc-con\">\r\n\r\n                        <p>${artistName} <br>\r\n                            <span> <small>Album name: ${albumName} <br>\r\n                            Released on: ${releasedate}\r\n                            </small> </span>\r\n                        </p>\r\n\r\n                       <button id=\"${albumuri}\" class=\"album-btn\">Play album</button>\r\n                       <button id=\"${trackName}\" class=\"see-vid\"><u>See Music Videos</u></button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        `;\r\n\r\n        try {\r\n            document.querySelector(DOMElements.songList).insertAdjacentHTML('beforeend', html);\r\n            //document.getElementById(`${trackName}`).onclick = async () => { await _enterTrackToSearch(trackName) };\r\n        } catch (e) {\r\n            console.log('Error toptracks');\r\n        }\r\n    }\r\n\r\n    const _playAlbumEmbed = async (albumid) => {\r\n        document.querySelector('.spotify-player').innerHTML = ``;\r\n        let html = `\r\n            <iframe id=\"spot-player\" src=\"https://open.spotify.com/embed/album/${albumid}\"\r\n                       frameborder=\"0\" allowtransparency=\"true\"\r\n                      allow=\"encrypted-media\"></iframe>\r\n        `;\r\n        document.querySelector('.spotify-player').insertAdjacentHTML('beforeend', html);\r\n    }\r\n\r\n    const _enterTrackToSearch = async (keyword) => {\r\n        var search = document.querySelector(DOMElements.searchField);\r\n        search.value = keyword;\r\n        await _clearVideoList();\r\n        return keyword;\r\n    }\r\n\r\n    //Added\r\n    const _playVideo = async (videoid) => {\r\n        document.querySelector('#videoContainer').innerHTML = ``;\r\n        let html = `\r\n             <iframe id=\"video-player\" src=\"https://www.youtube.com/embed/${videoid}\"\r\n                       frameborder=\"0\" allowtransparency=\"true\"\r\n                      allow=\"encrypted-media\"></iframe>\r\n        `;\r\n        document.querySelector('#videoContainer').insertAdjacentHTML('beforeend', html);\r\n    }\r\n\r\n    const _clearVideoList = async () => {\r\n        document.querySelector(DOMElements.videoList).innerHTML = ``;\r\n    }\r\n\r\n    const _clearSongList = async () => {\r\n        document.querySelector(DOMElements.songList).innerHTML = ``;\r\n    }\r\n\r\n    return {\r\n\r\n        inputOutputFields() {\r\n            return {\r\n                songList: document.querySelector(DOMElements.videoList),\r\n                artistList: document.querySelector(DOMElements.artistList),\r\n                searchField: document.querySelector(DOMElements.searchField),\r\n                searchButton: document.querySelector(DOMElements.searchButton),\r\n                filterButtons: document.querySelector(DOMElements.filterButtons),\r\n                topTrackList: document.querySelector(DOMElements.songList),\r\n                searchVidList: document.querySelector(DOMElements.searchVidList),\r\n                searchSongList: document.querySelector(DOMElements.searchSongList),\r\n                resultItemsCon: document.querySelector(DOMElements.resultItemsCon),\r\n                songRadioBtn: document.querySelector(DOMElements.songRadioBtn),\r\n                videoRadioBtn: document.querySelector(DOMElements.videoRadioBtn),\r\n                videoCon: document.querySelector(DOMElements.videoCon),\r\n                songCon: document.querySelector(DOMElements.songCon)\r\n            }\r\n        },\r\n\r\n        getRadioBtns() {\r\n          return {\r\n              songRadioBtn: document.querySelector(DOMElements.songRadioBtn),\r\n              videoRadioBtn: document.querySelector(DOMElements.videoRadioBtn)\r\n          }\r\n        },\r\n\r\n        getSeeVidButtons() {\r\n            return {  seeVideosButton: document.querySelectorAll(DOMElements.seeVideosButton)}\r\n        },\r\n\r\n        createArtistDetail(artist) {\r\n            return _createArtistDetail(artist);\r\n        },\r\n\r\n        createFilterButtons(artist) {\r\n            return _createFilterButtons(artist);\r\n        },\r\n\r\n        createVideoDetail(song) {\r\n           return _createVideoDetail(song);\r\n        },\r\n\r\n        clearSongList() {\r\n            return _clearSongList();\r\n        },\r\n\r\n        displayNoSongsResults() {\r\n            return _displayNoSongResults()\r\n        },\r\n\r\n        createSongDetail(track) {\r\n            return _createSongDetail(track);\r\n        },\r\n\r\n        enterTrackToSearch(keyword) {\r\n            return _enterTrackToSearch(keyword);\r\n        },\r\n\r\n        clearBody() {\r\n            return _clearBody();\r\n        },\r\n        clearTopTrackList() {\r\n            return _clearSongList();\r\n        },\r\n        getPlayAlbumBtn() {\r\n            return  { playAlbumButtons: document.querySelectorAll(DOMElements.playAlbumButtons) }\r\n        },\r\n        playAlbumEmbed(albumid) {\r\n            return _playAlbumEmbed(albumid);\r\n\r\n        },\r\n        getPlayVideosButtons() {\r\n            return {  playVideosButtons: document.querySelectorAll(DOMElements.playVideosButtons)}\r\n        },\r\n        getPlayVideo(videoid) {\r\n            return _playVideo(videoid);\r\n        },\r\n        clearVideoList() {\r\n            return _clearVideoList();\r\n        }\r\n    }\r\n})();\r\n\r\nconst APPController = (function (UICtrl, APICtrl) {\r\n    const DOMElements = UICtrl.inputOutputFields();\r\n    const artistsDetail = Array();\r\n    const videoIDs = Array();\r\n    let topTracks = [];\r\n\r\n    const loadSeeMVButtons = async () => {\r\n        // Add event listener for every button inside the song detail container to search for its music video\r\n        let seeMVButtons = UICtrl.getSeeVidButtons().seeVideosButton;\r\n        for (const btn of seeMVButtons) {\r\n            btn.onclick = async () => {\r\n                await clickVideoRB();\r\n                await UICtrl.enterTrackToSearch(btn.id);\r\n                await searchYT();\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Gets the artist information and loads the artist names for the filter buttons\r\n     */\r\n    const loadArtists = async () => {\r\n        const artists = await APICtrl.fetchArtistData();\r\n\r\n        // Create all filter button\r\n        let allbutton = {};\r\n        allbutton.nickname = 'All';\r\n        await UICtrl.createFilterButtons(allbutton);\r\n\r\n        artists.forEach(artist => {\r\n\r\n            // Creates the filter seeMVButtons for the music page\r\n            UICtrl.createFilterButtons(artist);\r\n\r\n            // Creates the artist information in the artist page\r\n            UICtrl.createArtistDetail(artist);\r\n\r\n            let artistDet = Object();\r\n            artistDet.name = artist.name;\r\n            artistDet.nickName = artist.nickname;\r\n            artistDet.yId = artist.yt;\r\n            artistDet.sId = artist.sp;\r\n\r\n            artistsDetail.push(artistDet);\r\n        });\r\n\r\n\r\n        await loadTopTracks();\r\n        await loadSeeMVButtons();\r\n        await loadPlayAlbumButtons();\r\n\r\n        let filterButtons = DOMElements.filterButtons.children;\r\n        for (const fbtn of filterButtons) {\r\n            fbtn.onclick = async () => {\r\n                const artistNickname = fbtn.id; // the id of the button is the nickname of the artist\r\n\r\n                if (artistNickname === 'All') {\r\n                    // clear the songs inside the top track list\r\n                    await UICtrl.clearTopTrackList();\r\n                    topTracks.forEach(song => UICtrl.createSongDetail(song));\r\n                    await loadSeeMVButtons();\r\n                    await loadPlayAlbumButtons();\r\n                } else {\r\n                    await UICtrl.clearTopTrackList();\r\n\r\n                    // get the spotify id of the artist, as provided by the button\r\n                    const artistInfo = artistsDetail.find(item => item.nickName === artistNickname);\r\n                    const spID = artistInfo.sId;\r\n\r\n                    // if the container id of the song detail matches the id of the button then add to the list\r\n                    const filtered = topTracks.filter(item => item.artists[0].id === spID);\r\n                    filtered.forEach(song => UICtrl.createSongDetail(song));\r\n                    await loadSeeMVButtons();\r\n                    await loadPlayAlbumButtons();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const loadPlayAlbumButtons = async () => {\r\n        let playAlbumButtons = UICtrl.getPlayAlbumBtn().playAlbumButtons;\r\n\r\n        for (const btn of playAlbumButtons) {\r\n            btn.onclick = async () => {\r\n                await UICtrl.playAlbumEmbed(btn.id.substring(14));\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Fetches the top tracks of every artist from the Spotify API\r\n     */\r\n    const loadTopTracks = async () => {\r\n        // loading of top tracks to the song list\r\n        for (const artist of artistsDetail) {\r\n            let tracks = (await APICtrl.getTopTracks(artist.sId, 'PH')).tracks;\r\n            topTracks = topTracks.concat(tracks);\r\n        }\r\n        topTracks.sort((a, b) => {\r\n            var x = a.name.toLowerCase();\r\n            var y = b.name.toLowerCase();\r\n            if (x < y) {return -1;}\r\n            if (x > y) {return 1;}\r\n            return 0;\r\n        });\r\n        topTracks.forEach(track => UICtrl.createSongDetail(track));\r\n\r\n    }\r\n\r\n        function clickSongRB () {\r\n            DOMElements.videoRadioBtn.checked = false;\r\n            DOMElements.songRadioBtn.checked = true;\r\n            DOMElements.songCon.style.display = 'block';\r\n            DOMElements.videoCon.style.display = 'none';\r\n            try {\r\n                document.querySelector('#spot-player').style.display = 'block';\r\n            } catch (e) {}\r\n\r\n            try {\r\n                document.querySelector('.filter-con').style.display = 'block';\r\n            } catch (e) {}\r\n        }\r\n\r\n        function clickVideoRB () {\r\n            DOMElements.videoRadioBtn.checked = true;\r\n            DOMElements.songRadioBtn.checked = false;\r\n            DOMElements.songCon.style.display = 'none';\r\n            DOMElements.videoCon.style.display = 'block';\r\n            try {\r\n                document.querySelector('#spot-player').style.display = 'none';\r\n            } catch (e) {}\r\n            try {\r\n                document.querySelector('.filter-con').style.display = 'none';\r\n            } catch (e) {\r\n            }\r\n        }\r\n\r\n    try {\r\n        DOMElements.songRadioBtn.addEventListener('click', () => {\r\n            clickSongRB();\r\n        });\r\n    } catch (e) {}\r\n\r\n\r\n    try {\r\n        DOMElements.videoRadioBtn.addEventListener('click', () => {\r\n           clickVideoRB();\r\n        });\r\n    } catch (e) {}\r\n\r\n    /*\r\n     * Even listener when the search button is clicked\r\n     */\r\n    try {\r\n        DOMElements.searchButton.addEventListener('click', async (e) => {\r\n            //prevent page reset\r\n            e.preventDefault();\r\n            if (DOMElements.songRadioBtn.checked === true) {\r\n                await UICtrl.clearSongList();\r\n                await searchSPTFY();\r\n                await loadPlayAlbumButtons();\r\n            } else {\r\n                await UICtrl.clearVideoList();\r\n                await searchYT();\r\n            }\r\n        });\r\n    } catch (e) {}\r\n\r\n\r\n    const searchSPTFY = async  () => {\r\n        const keyword = DOMElements.searchField.value;\r\n        try {\r\n            const songs = (await APICtrl.fetchSongs(keyword)).tracks;\r\n            const songItems = songs.items;\r\n            console.log(songs);\r\n            songItems.forEach(song => {\r\n                artistsDetail.forEach(artistdet => {\r\n                    if (song.album.artists[0].id === artistdet.sId) {\r\n                        UICtrl.createSongDetail(song);\r\n                    }\r\n                })\r\n            });\r\n        } catch (e) {\r\n            console.log('No tracks found.')\r\n        }\r\n    }\r\n\r\n\r\n    /*\r\n     * Method that gets the value of the search field then finds related videos\r\n     * in the channel of Big Hit using the Youtube API\r\n     */\r\n    const searchYT = async () => {\r\n        await UICtrl.clearSongList();\r\n\r\n        const keyword = DOMElements.searchField.value;\r\n        try {\r\n            const songs = await APICtrl.fetchVideos(keyword);\r\n            songs.forEach(song => UICtrl.createVideoDetail(song));\r\n\r\n            let videoButtons = UICtrl.getPlayVideosButtons().playVideosButtons;\r\n            for (const btn of videoButtons) {\r\n                btn.onclick = async () => {\r\n                    await UICtrl.getPlayVideo(btn.id);\r\n                }\r\n            }\r\n        } catch (e) {\r\n            await UICtrl.displayNoSongsResults();\r\n        }\r\n    }\r\n\r\n    return {\r\n        init() {\r\n            console.log('App is starting');\r\n            loadArtists();\r\n        }\r\n    }\r\n})(UIController, APIController);\r\n\r\nAPPController.init();\r\n\r\n\r\n// Gwyneth\r\n// Hamburger icon\r\nconst navSlide = () => {\r\n  const burger = document.querySelector('.burger');\r\n  const nav = document.querySelector('.nav-links');\r\n  const navLinks = document.querySelectorAll('.nav-links li');\r\n\r\n  burger.addEventListener('click',()=>{\r\n    //Toggle Nav\r\n    nav.classList.toggle('nav-active');\r\n\r\n    //Animate Links\r\n    navLinks.forEach((link, index) => {\r\n      if (link.style.animation) {\r\n        link.style.animation = '';\r\n      } else {\r\n        link.style.animation = `navLinkFade .5s ease forwards ${index / 5 + .2}s`;\r\n      }\r\n    });\r\n\r\n    burger.classList.toggle('toggle');\r\n  });\r\n}\r\n\r\nnavSlide();\r\n// Slideshow animation\r\nvar slideIndex = 0;\r\ntry {\r\n    showSlides();\r\n} catch (e){}\r\nfunction showSlides() {\r\n  var i;\r\n  var slides = document.getElementsByClassName(\"mySlides\");\r\n  var dots = document.getElementsByClassName(\"dot\");\r\n  for (i = 0; i < slides.length; i++) {\r\n    slides[i].style.display = \"none\";\r\n  }\r\n  slideIndex++;\r\n  if (slideIndex > slides.length) {slideIndex = 1}\r\n  for (i = 0; i < dots.length; i++) {\r\n    dots[i].className = dots[i].className.replace(\" active\", \"\");\r\n  }\r\n  slides[slideIndex-1].style.display = \"block\";\r\n  dots[slideIndex-1].className += \" active\";\r\n  setTimeout(showSlides, 3000);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/jscript.js	(revision e1c00cf4e21f25fee46c33fc8d1a99537d8e9654)
+++ src/jscript.js	(date 1604504518924)
@@ -1,3 +1,10 @@
+/**
+ * Controller responsible for fetching data from Spotify, Youtube
+ * and other relevant data for the making of DOM elements of the
+ * website.
+ *
+ * by Alvin John Cutay
+ */
 const APIController = (function () {
     window.onload = loadClientAPI;
     // YOUTUBE REQUIREMENTS
@@ -15,7 +22,7 @@
 
     /** Private methods for Youtube API */
 
-    //loads the Youtube API
+    /* Loads the Youtube API */
     function loadClientAPI() {
         gapi.client.setApiKey(YT_API_KEY);
         gapi.client.load("https://www.googleapis.com/discovery/v1/apis/youtube/v3/rest")
@@ -24,7 +31,7 @@
         gapi.client.init({'clientId': YT_CLIENT_ID});
     }
 
-    // gets the artists data
+    /* Gets the artists data */
     const _fetchArtistData = async () => {
         const result = await fetch('http://bighitmusic.com/Artist.txt', {
             headers: {
@@ -36,7 +43,7 @@
     }
 
 
-    // fetches the videos by the explicit keyword
+    /* Fetches the videos by the explicit keyword */
     const _fetchVideos = async (keyword) => {
         var response = await gapi.client.youtube.search.list({
             "part": "snippet",
@@ -50,7 +57,7 @@
 
     /** Private methods for Spotify API */
 
-    // Fetches the token of the Spotify API
+    /* Fetches the token of the Spotify API */
     const _getToken = async () => {
         const result = await fetch('https://accounts.spotify.com/api/token', {
             method: 'POST',
@@ -65,7 +72,7 @@
         return data.access_token;
     }
 
-    // Fetches the Top Tracks of an artist by its ID, in a country
+    /* Fetches the Top Tracks of an artist by its ID, in a country */
     const _getTopTracks = async (artistId, market) => {
 
         const result = await fetch (`https://api.spotify.com/v1/artists/${artistId}/top-tracks?market=${market}`, {
@@ -79,7 +86,7 @@
         return await result.json();
     }
 
-    // Fetches the tracks related to the searched keyword
+    /* Fetches the tracks related to the searched keyword */
     const _fetchSongs = async (keyword) => {
         let query = encodeURI(keyword);
         const result = await fetch (`https://api.spotify.com/v1/search?q=${query}&type=track&market=PH`, {
@@ -91,37 +98,31 @@
             }
         });
         return await result.json();
-
-
     }
 
     // use of closures to access the private methods
     return {
-
         // public method
         fetchArtistData() {
             return _fetchArtistData();
         },
-
         fetchVideos(keyword) {
             return _fetchVideos(keyword);
         },
-
-        getToken() {
-            return _getToken();
-        },
         getTopTracks(artistId, market, token) {
             return _getTopTracks(artistId, market, token);
         },
         fetchSongs(keyword) {
             return _fetchSongs(keyword);
-
         }
     }
-
 })();
 
+
+/** Controller responsible for the creation of DOM elements. */
 const UIController = (function() {
+    /* Constant that holds all classes and IDs of the necessary
+    elements for the making of DOM elements.*/
     const DOMElements = {
         head: 'head',
         style: '#main-style',
@@ -147,6 +148,7 @@
     }
 
     /** Private methods */
+    /* Creates the video detail inside */
     const _createVideoDetail = async (song) => {
         let title = song.snippet.title;
         let published = song.snippet.publishedAt;
@@ -161,17 +163,15 @@
                     <div class="desc-con">
                         <h4>${title}</h4>
                         <small>${published}</small><br>
-
                     </div>
                 </div>
                 `;
-
-
         try {
             document.querySelector(DOMElements.videoList).insertAdjacentHTML('beforeend', html);
         } catch (e){}
     }
 
+    /*  */
     const _createArtistDetail = async (artist) => {
         let img = artist.img;
         let name = artist.name;
Index: src/style.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>* {\r\n    font-family: Montserrat, sans-serif;\r\n}\r\n\r\nh1 {\r\n    margin-top: 45px;\r\n}\r\n/*\r\nThis container creates an equal margin to the sides of each web page\r\n*/\r\n.container{\r\n    width: 90%;\r\n    margin: auto;\r\n    overflow: hidden;\r\n    background-color: white;\r\n    padding-left: 5%;\r\n    padding-right: 5%;\r\n  }\r\n  /*Artist HTML*/\r\n\r\n  #artist-list{\r\n    width: auto;\r\n    height: 1000px;\r\n  }\r\n\r\n.artistContainer{\r\n  height: auto;\r\n  width: 27%;\r\n  display: inline-block;\r\n  float: center;\r\n  margin-right: .5in;\r\n\r\n}\r\n\r\n  .artistContainer img{\r\n    float: left;\r\n    height: auto;\r\n    width: 100%;\r\n    display: block;\r\n    opacity: 1;\r\n    transition: .5s ease;\r\n    backface-visibility: hidden;\r\n    filter: url(\"data:image/svg+xml;utf8,<svg xmlns=\\'http://www.w3.org/2000/svg\\'><filter id=\\'grayscale\\'><feColorMatrix type=\\'matrix\\' values=\\'0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\\'/></filter></svg>#grayscale\"); /* Firefox 10+, Firefox on Android */\r\n    -webkit-filter: grayscale(100%);\r\n    -moz-filter: grayscale(100%);\r\n    /* -ms-filter: grayscale(100%); */\r\n    filter: grayscale(100%);\r\n    /* filter: gray;*/\r\n  }\r\n\r\n.artistContainer:hover img {\r\n-webkit-filter: none;\r\n-moz-filter: none;\r\n-ms-filter: none;\r\nfilter: none;\r\n}\r\n\r\n\r\nnav {\r\n    width: 100%;\r\n    background-color: white;\r\n    display: flex;\r\n    justify-content: space-around;\r\n    min-height: 15vh;\r\n    color: black;\r\n    align-items: center;\r\n}\r\n\r\nnav img {\r\n    width: 100px;\r\n    height: auto;\r\n}\r\n\r\n.nav-links {\r\n    display: flex;\r\n    width: auto;\r\n    height: auto;\r\n}\r\n\r\nnav li {\r\n    list-style: none;\r\n    height: auto;\r\n    margin: auto 10px;\r\n    width: 80px;\r\n}\r\n\r\nnav ul {\r\n    margin-left: 500px;\r\n    padding: 0;\r\n    display: flex;\r\n    justify-content: center;\r\n}\r\n\r\nnav ul a {\r\n    width: auto;\r\n    height: 100px;\r\n    color: black;\r\n    text-decoration: none;\r\n    text-align: center;\r\n    font-size: 15px;\r\n}\r\n\r\nli a:hover, li a:focus, li a.link-focus{\r\n    font-weight: bolder;\r\n    font-size: 16px;\r\n}\r\n\r\n/* Search */\r\n\r\n\r\n.search-container {\r\n    float: right;\r\n    padding: 0;\r\n    width: 304px;\r\n    height: 47px;\r\n    overflow: hidden;\r\n    background: rgba(255, 255, 255, 0.5);\r\n    box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.25);\r\n    border-radius: 15px;\r\n    margin-top: 0.35in;\r\n    display: flex;\r\n    justify-content: space-around;\r\n}\r\n\r\n#search-fld:focus {\r\n    outline: none;\r\n}\r\n\r\n#search-fld {\r\n    background-color: #ffffff;\r\n    border-color: rgba(0,0,0,0);\r\n    font-size: 15px;\r\n    padding: 12px;\r\n    color: #333;\r\n}\r\n\r\n.search-icon {\r\n    width: 25px;\r\n    height: 25px;\r\n    overflow: visible;\r\n    background-size: cover;\r\n    background-repeat: no-repeat;\r\n    background-position: center;\r\n}\r\n\r\n#search-btn {\r\n    background-color: transparent;\r\n    border: none;\r\n    box-sizing: border-box;\r\n    padding: 0;\r\n}\r\n\r\n#choice1, #choice2 {\r\n    margin: 0 10px 0 0;\r\n}\r\n\r\n\r\n/* Alvin */\r\n.aligned-con {\r\n    align-content: center;\r\n    display: flex;\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.aligned-con p {\r\n    margin: 0;\r\n}\r\n\r\n.radio-btn {\r\n    margin-top: 15px;\r\n}\r\n.radio-btn * {\r\n    margin: 0 10px 0 0;\r\n    height: 20px;\r\n}\r\n\r\n.filter-but {\r\n    border: 1px solid black;\r\n    background-color: white;\r\n    margin-left: 5px;\r\n    border-radius: 15px;\r\n    width: auto;\r\n    float: left;\r\n    justify-content: center;\r\n}\r\n\r\n.filter-but:hover {\r\n    color: white;\r\n    background-color: #343434;\r\n}\r\n\r\n.filter-but:focus {\r\n    color: white;\r\n    background-color: #1f1f1f;\r\n    box-shadow: 0 1px 2px black;\r\n    outline: none;\r\n}\r\n\r\n.column {\r\n    display: inline-flex;\r\n    width: 100%;\r\n}\r\n#result-items-con{\r\n  width: 100%;\r\n}\r\n\r\n/* Spotify Design */\r\n.spotify-song-con {\r\n    margin: 15px auto;\r\n    width: 400px;\r\n    height: auto;\r\n}\r\n\r\n.spotify-player {\r\n    width: 400px;\r\n    height: 300px;\r\n    position: fixed;\r\n    top: 45vh;\r\n    right: 5vw;\r\n}\r\n\r\n.spotify-player iframe {\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n\r\n\r\n#song-list {\r\n    width: 65%;\r\n    box-sizing: border-box;\r\n    padding:  0;\r\n    list-style: none;\r\n}\r\n.spotify-song-con img:hover {\r\n    -webkit-filter: grayscale(50%);\r\n}\r\n\r\n.track-info {\r\n    display: flex;\r\n}\r\n\r\n.track-info img {\r\n    width: 180px;\r\n    height: 180px;\r\n    margin-right: 20px;\r\n    border-radius: 10px;\r\n}\r\n\r\n.song-img-con + .song-desc-con {\r\n\r\n    align-items: center;\r\n    display: block;\r\n}\r\n.see-vid {\r\n    border: none;\r\n    background-color: white;\r\n}\r\n\r\n.see-vid u:hover{\r\n    font-weight: bold;\r\n}\r\n\r\n.see-vid:focus{\r\n    outline: none;\r\n}\r\n\r\n.album-btn:focus {\r\n    outline: none;\r\n    background-color: black;\r\n}\r\n\r\n.album-btn:hover {\r\n    background-color: black;\r\n}\r\n\r\n.album-btn {\r\n    background-color: #393939;\r\n    box-shadow: 0 1px 2px #000000;\r\n    color: #ffffff;\r\n    border-radius: 25px;\r\n    border: none;\r\n    width: 150px;\r\n    height: 30px;\r\n    margin-bottom: 5px;\r\n}\r\n\r\nspan {\r\n    color: gray;\r\n    size: 13px;\r\n}\r\n\r\n.list-con {\r\n    box-sizing: border-box;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: flex-start;\r\n    overflow: hidden;\r\n    width: 100%;\r\n}\r\n\r\n.video-con {\r\n    display: flex;\r\n    margin: 5px auto;\r\n}\r\n\r\n#videos {\r\n    margin: 5px auto;\r\n    width: 100%;\r\n}\r\n\r\n#videoContainer {\r\n  margin-left: 1in;\r\n  margin-right: 1in;\r\n  text-align: center;\r\n\r\n\r\n}\r\n\r\n#video-player{\r\n  width: 12in;\r\n  height: 6in;\r\n\r\n  text-align: center;\r\n\r\n\r\n}\r\n\r\n/*Slideshow Conatiner*/\r\n\r\n.slideshow-container{\r\n  max-width: 1500px;\r\n  position: relative;\r\n  margin: auto;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.mySlides {\r\n  display: none;\r\n}\r\n.mySlides.fade img{\r\n  vertical-align: middle;\r\n  height: auto;\r\n  width: 100%;\r\n}\r\n\r\n.text {\r\n  color: #f2f2f2;\r\n  font-size: 15px;\r\n  padding: 8px 12px;\r\n  position: absolute;\r\n  bottom: 8px;\r\n  width: 98.4%;\r\n  text-align: center;\r\n  background-color: black;\r\n  opacity: 75%;\r\n  font-family: Montserrat, sans-serif, bold;\r\n  font-size: .5in;\r\n}\r\n\r\n.numbertext {\r\n  color: #f2f2f2;\r\n  font-size: 12px;\r\n  padding: 8px 12px;\r\n  position: absolute;\r\n  top: 0;\r\n}\r\n\r\n.dot {\r\n  height: 15px;\r\n  width: 15px;\r\n  margin: 0 2px;\r\n  background-color: #bbb;\r\n  border-radius: 50%;\r\n  display: inline-block;\r\n  transition: background-color 0.6s ease;\r\n}\r\n\r\n.active {\r\n  background-color: #717171;\r\n}\r\n\r\n.fade {\r\n  -webkit-animation-name: fade;\r\n  -webkit-animation-duration: 1.5s;\r\n  animation-name: fade;\r\n  animation-duration: 1.5s;\r\n}\r\n\r\n@-webkit-keyframes fade {\r\n  from {opacity: .4}\r\n  to {opacity: 1}\r\n}\r\n\r\n@keyframes fade {\r\n  from {opacity: .4}\r\n  to {opacity: 1}\r\n}\r\n\r\n/*About*/\r\n.wrapper{\r\n  display: flex;\r\n  flex-flow: row wrap;\r\n  text-align: center;\r\n  border: 2px dotted black;\r\n  border-radius: 10px;\r\n}\r\n.wrapper>*{\r\n  padding: 10px;\r\n  margin:20px;\r\n  flex:1 100%;\r\n  border-radius: 10px;\r\n}\r\n.aboutTheSite {\r\nbackground: #f4f4f2;\r\n}\r\n.aboutTheSite h2{\r\n  text-align: center;\r\n}\r\n.aboutTheSite p{\r\n  text-align: justify;\r\n  padding-left: 30px;\r\n  padding-right: 30px;\r\n  padding-bottom: 30px;\r\n}\r\n.peopleBehind {\r\n  background: #e8e8e8;\r\n  border: 1px solid black;\r\n}\r\n.peopleBehind img{\r\n  width: 80%;\r\n  height: auto;\r\n  margin-left: 1%;\r\n}\r\n.peopleBehind h2{\r\n  text-align: center;\r\n}\r\n.peopleBehind p {\r\n  text-align: justify;\r\n  padding-left: 30px;\r\n  padding-right: 30px;\r\n  padding-bottom: 30px;\r\n\r\n}\r\n.loc{\r\n  margin: 0;\r\n  padding: 0px 10px 10px 10px;\r\n  background: #e8e8e8;\r\n  border: 1px solid black;\r\n}\r\n\r\n#con img{\r\n  width: 7in;\r\n  height: auto;\r\n  float:right;\r\n  display: inline-block;\r\n}\r\n\r\n#GetInTouch p{\r\n  font-size: 50px;\r\n}\r\n\r\n#name{\r\n  height: 20px;\r\n  width: 45%;\r\n  border-radius: 5px;\r\n}\r\n#name:focus{\r\n  background: #e1e1e1;\r\n}\r\n\r\n#email{\r\n  height: 20px;\r\n  width: 45%;\r\n  border-radius: 5px;\r\n}\r\n#email:focus{\r\n  background: #e1e1e1;\r\n}\r\n\r\n#subject{\r\n  height: 20px;\r\nwidth: 45%;\r\n  border-radius: 5px;\r\n}\r\n#subject:focus{\r\n  background: #e1e1e1;\r\n}\r\n#msg {\r\n  height: 200px;\r\n  width: 45%;\r\n  border-radius: 5px;\r\n}\r\n#msg:focus{\r\n  background: #e1e1e1;\r\n}\r\n\r\n#lbl1{\r\n  margin-right: 3.9%;\r\n}\r\n\r\n#lbl2{\r\n  margin-right: 4%;\r\n}\r\n\r\n#lbl3{\r\n  margin-right: 3.2%;\r\n}\r\n\r\n#lbl4{\r\n  padding-bottom: 15px;\r\n}\r\n\r\n\r\n#submitt{\r\n  width: 12%;\r\n  height: 50px;\r\n  font-size: 13px;\r\n  margin-left: 45%;\r\n  cursor: pointer;\r\n}\r\n\r\n\r\n/*Index*/\r\n\r\niframe{\r\n  height: 2in;\r\n  width: 3.5in;\r\n}\r\n#trending{\r\n  width: auto;\r\n  height: 800px;\r\n}\r\n.vids {\r\n  display: inline-block;\r\n  float: left;\r\n  height: auto;\r\n  width: 25%;\r\n}\r\n\r\n.vids h3{\r\n  margin-right: 1in;\r\n}\r\n\r\n#news {\r\n  width: auto;\r\n  height: 750px;\r\n}\r\n\r\n.newss {\r\n  display: inline-block;;\r\n  float: left;\r\n  height: auto;\r\n  width: 25%;\r\n}\r\n\r\n.newss h3{\r\n    margin-right: 1in;\r\n  }\r\n\r\n.newss img {\r\n  width: 300px;\r\n  height: auto;\r\n}\r\n\r\n.box{\r\n  position: relative;\r\n  max-width: 100%;\r\n  background-color: yellow;\r\n  margin: 10px;\r\n  padding: 15px;\r\n  display: flex;\r\n}\r\n.aboutLogoPicture{\r\n  max-width: 35%;\r\n  flex: 0 0 300px;\r\n}\r\n\r\n@media only screen and (max-width: 1024px) {\r\n    /* This container creates an equal margin to the sides of each web page */\r\n    .container {\r\n        width: 90%;\r\n        margin: auto;\r\n        overflow: hidden;\r\n        background-color: white;\r\n        padding-left: 0;\r\n        padding-right: 0;\r\n    }\r\n\r\n    h1 {\r\n        text-align: center;\r\n    }\r\n\r\n    /* Navigation Style */\r\n    body {\r\n        overflow-x: hidden;\r\n    }\r\n\r\n    nav {\r\n        position: fixed;\r\n        z-index: 4;\r\n        top: 0;\r\n        display: flex;\r\n    }\r\n\r\n    nav ul {\r\n        margin-left: 0;\r\n    }\r\n\r\n    .nav-links {\r\n        position: absolute;\r\n        right: 0;\r\n        height: 92vh;\r\n        top: 8vh;\r\n        background-color: white;\r\n        opacity: 95%;\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        width: 40%;\r\n        padding-left: 5%;\r\n        padding-right: 6%;\r\n        color: white;\r\n        transform: translateX(100%);\r\n        transition: transform 0.5s ease-in;\r\n        z-index: 1;\r\n    }\r\n\r\n    .nav-links li {\r\n        opacity: 0;\r\n\r\n    }\r\n\r\n    .burger {\r\n        display: block;\r\n        cursor: pointer;\r\n        float: right;\r\n    }\r\n\r\n    .nav-active {\r\n        transform: translateX(0%);\r\n    }\r\n\r\n\r\n    .burger div {\r\n        width: 25px;\r\n        height: 3px;\r\n        margin: 5px;\r\n        background-color: black;\r\n    }\r\n\r\n    @keyframes navLinkFade {\r\n        from {\r\n            opacity: 0;\r\n            transform: translateX(-50px);\r\n        }\r\n        to {\r\n            opacity: 1;\r\n            transform: translateX(0px);\r\n        }\r\n    }\r\n\r\n    .toggle .line1 {\r\n        transform: rotate(-45deg) translate(-5px, 6px);\r\n    }\r\n\r\n    .toggle .line2 {\r\n        opacity: 0;\r\n    }\r\n\r\n    .toggle .line3 {\r\n        transform: rotate(45deg) translate(-5px, -6px);\r\n    }\r\n\r\n    .spotify-player {\r\n        width: 100%;\r\n        height: 200px;\r\n        top: 75%;\r\n        right: 0;\r\n    }\r\n\r\n    .slideshow-container, h1{\r\n        margin-top: 100px;\r\n    }\r\n}\r\n\r\n\r\n\r\n    /*MOBILE VERSION*/\r\n/*MOBILE VERSION*/\r\n/*MOBILE VERSION*/\r\n/*MOBILE VERSION*/\r\n/*MOBILE VERSION*/\r\n/*MOBILE VERSION*/\r\n/*MOBILE VERSION*/\r\n/*MOBILE VERSION*/\r\n\r\n@media only screen and (max-width: 768px) and (min-width: 360px) {\r\n\r\n      .text{\r\n        font-size: .25in;\r\n        width: 94.4%;\r\n      }\r\n\r\n\r\n    #result-items-con {\r\n        width: 100%;\r\n    }\r\n\r\n    #song-list {\r\n        width: 350px;\r\n    }\r\n\r\n\r\n\r\n    /* Search */\r\n\r\n    .musicHeader {\r\n        /* Contains the Header and the search container */\r\n        display: flex;\r\n        height: 200px;\r\n        flex-direction: column;\r\n        text-align: center;\r\n    }\r\n\r\n    .search-container {\r\n        clear: both;\r\n        margin: 0 auto;\r\n        width: 80%;\r\n    }\r\n\r\n    /* Music page */\r\n    .spotify-song-con * {\r\n        width: 100%;\r\n        margin: 5px 0;\r\n    }\r\n\r\n    .spotify-song-con h3 {\r\n        text-align: center;\r\n    }\r\n\r\n    .spotify-player {\r\n        width: 100%;\r\n        height: 200px;\r\n        top: 75%;\r\n        right: 0;\r\n    }\r\n\r\n\r\n    .track-info {\r\n        display: flex;\r\n        flex-direction: column;\r\n    }\r\n\r\n    .track-info img {\r\n        width: 280px;\r\n        height: 280px;\r\n    }\r\n\r\n    .song-desc-con {\r\n        text-align: center;\r\n    }\r\n\r\n    #song-list{\r\n      margin: auto;\r\n    }\r\n\r\n\r\n    div[class*=\"song-\"], .track-info img {\r\n        align-items: center;\r\n        display: block;\r\n        margin: 10px auto;\r\n    }\r\n\r\n\r\n    .album-btn {\r\n        width: 200px;\r\n        margin: 10px auto;\r\n    }\r\n\r\n    .list-con {\r\n        box-sizing: border-box;\r\n        display: flex;\r\n        flex-wrap: wrap;\r\n        justify-content: flex-start;\r\n        overflow: hidden;\r\n        width: 100%;\r\n    }\r\n\r\n    /* Video under Music page */\r\n\r\n    .video-con {\r\n        /*display: flex;*/\r\n        /*margin: 5px auto;*/\r\n    }\r\n    .desc-con {\r\n      margin-left: 5%;\r\n      margin-right: 6%;\r\n    }\r\n    \r\n    .video-player {\r\n      width: 200px;\r\n      height: auto;\r\n    }\r\n\r\n\r\n    #videos {\r\n        /*display: flex;*/\r\n        /*margin: 5px auto;*/\r\n    }\r\n    footer {\r\n            margin-bottom: 180px;\r\n        }\r\n  /*Artist*/\r\n\r\n  .artistContainer{\r\n    height: auto;\r\n    width: 80%;\r\n    display: block;\r\n    float: none;\r\n    margin: auto;\r\n\r\n  }\r\n  #artist-list{\r\n    text-align: center;\r\n    height: 1500px\r\n  }\r\n  /*Index*/\r\n  #trending{\r\n    width: auto;\r\n    height: 2250px;\r\n  }\r\n  .vids {\r\n    display: table;\r\n    margin: 0 auto;\r\n    height: auto;\r\n    width: 5%;\r\n    float: none;\r\n  }\r\n\r\n  .vids h3{\r\n    margin: 0 auto;\r\n    text-align: center;\r\n    margin-bottom: 3%;\r\n  }\r\n\r\n  #news {\r\n    width: auto;\r\n    height: 2500px;\r\n  }\r\n\r\n  .newss {\r\n    display: table;\r\n    margin: 0 auto;\r\n    height: auto;\r\n    width: 5%;\r\n    float: none;\r\n  }\r\n\r\n  .newss h3{\r\n    margin: 0 auto;\r\n    text-align: center;\r\n    margin-bottom: 30px;\r\n    }\r\n\r\n  .newss img {\r\n    width: 300px;\r\n    height: auto;\r\n  }\r\n\r\n  /*About*/\r\n  .wrapper{\r\n    display: flex;\r\n    flex-flow: row wrap;\r\n    text-align: center;\r\n    border: 2px dotted black;\r\n    border-radius: 5px;\r\n  }\r\n  .wrapper>*{\r\n    padding: 5px;\r\n    margin:20px;\r\n    flex:1 100%;\r\n    border-radius: 5px;\r\n  }\r\n  .aboutTheSite {\r\n  background: #f4f4f2;\r\n  }\r\n  .aboutTheSite h2{\r\n    text-align: center;\r\n  }\r\n  .aboutTheSite p{\r\n    text-align: justify;\r\n    padding-left: 15px;\r\n    padding-right: 15px;\r\n    padding-bottom: 15px;\r\n  }\r\n  .peopleBehind {\r\n    background: #e8e8e8;\r\n    border: 1px solid black;\r\n  }\r\n  .peopleBehind img{\r\n    width: 40%;\r\n    height: auto;\r\n    margin-left: 1%;\r\n  }\r\n  .peopleBehind h2{\r\n    text-align: center;\r\n  }\r\n  .peopleBehind p {\r\n    text-align: justify;\r\n    padding-left: 15px;\r\n    padding-right: 15px;\r\n    padding-bottom: 15px;\r\n\r\n  }\r\n  .loc{\r\n    margin: 0;\r\n    padding: 0px 10px 10px 10px;\r\n    background: #e8e8e8;\r\n    border: 1px solid black;\r\n  }\r\n\r\n  #con img{\r\n    width: 50%;\r\n    height: auto;\r\n    float:right;\r\n    display: inline-block;\r\n  }\r\n\r\n  #GetInTouch p{\r\n    font-size: 50px;\r\n  }\r\n\r\n  #name{\r\n    height: 20px;\r\n    width: 45%;\r\n    border-radius: 5px;\r\n  }\r\n  #name:focus{\r\n    background: #e1e1e1;\r\n  }\r\n\r\n  #email{\r\n    height: 20px;\r\n    width: 45%;\r\n    border-radius: 5px;\r\n  }\r\n  #email:focus{\r\n    background: #e1e1e1;\r\n  }\r\n\r\n  #subject{\r\n    height: 20px;\r\n  width: 45%;\r\n    border-radius: 5px;\r\n  }\r\n  #subject:focus{\r\n    background: #e1e1e1;\r\n  }\r\n  #msg {\r\n    height: 200px;\r\n    width: 45%;\r\n    border-radius: 5px;\r\n  }\r\n  #msg:focus{\r\n    background: #e1e1e1;\r\n  }\r\n\r\n  #lbl1{\r\n    margin-right: 3.9%;\r\n  }\r\n\r\n  #lbl2{\r\n    margin-right: 4%;\r\n  }\r\n\r\n  #lbl3{\r\n    margin-right: 3.2%;\r\n  }\r\n\r\n  #lbl4{\r\n    padding-bottom: 15px;\r\n  }\r\n\r\n\r\n  #submitt{\r\n    width: 12%;\r\n    height: 50px;\r\n    font-size: 13px;\r\n    margin-left: 45%;\r\n    cursor: pointer;\r\n  }\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/style.css	(revision e1c00cf4e21f25fee46c33fc8d1a99537d8e9654)
+++ src/style.css	(date 1604501302420)
@@ -989,7 +989,4 @@
     margin-left: 45%;
     cursor: pointer;
   }
-
-
-
 }
